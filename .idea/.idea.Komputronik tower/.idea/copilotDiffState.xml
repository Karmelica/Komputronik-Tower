<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.Text;&#10;using UnityEngine;&#10;using TMPro;&#10;using Dan.Main;&#10;using UnityEngine.Networking;&#10;using UnityEngine.SceneManagement;&#10;&#10;public class HighScoreManager : MonoBehaviour&#10;{&#10;    #region Variables&#10;    &#10;    public static HighScoreManager Instance;&#10;    [SerializeField] int lvlIndex = 0; // Index of the level, used for leaderboard management&#10;    private LoginManager loginManager;&#10;    //private const string PublicLeaderboardKey = &quot;88e3d223505ea86807694065498f0b36ec49e2f3ea09970d31d77d5af4d5807b&quot;;&#10;    &#10;    private string apiKey = &quot;AIzaSyDyi7jzBfePmYyPj_rSsf7rIMADP-3fUb4&quot;;&#10;    private string firebaseFunctionUrl = &quot;https://addemail-zblptdvtpq-lm.a.run.app&quot;;&#10;    &#10;    [Header(&quot;Game UI&quot;)]&#10;    [SerializeField] private GameObject gameUI;&#10;    //[SerializeField] private List&lt;TextMeshProUGUI&gt; highScoreText;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    &#10;    private float currentScore = 0f;&#10;    private float scoreMultiplier = 1f;&#10;&#10;    [Header(&quot;Game Over Panel&quot;)]&#10;    [SerializeField] private TextMeshProUGUI gameOverScoreText;&#10;    [SerializeField] private GameObject gameOverPanel;&#10;    &#10;    #endregion&#10;    &#10;    #region Unity Methods&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;            //DontDestroyOnLoad(gameObject);&#10;        }&#10;        else if (Instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        lvlIndex = SceneManager.GetActiveScene().buildIndex;&#10;        loginManager = LoginManager.Instance;&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        Time.timeScale = 1f;&#10;        //GetLeaderboard();&#10;        UpdateScoreDisplay();&#10;        ShowPanel(GameState.Playing);&#10;    }&#10;    &#10;    private void Update()&#10;    &#10;    {&#10;        // Zwiększaj wynik w czasie (punkty za przetrwanie)&#10;        if (Character.CanMove)&#10;        {&#10;            AddScore(Time.deltaTime * 10f * scoreMultiplier);&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;&#10;    #region Leaderboard Management&#10;&#10;    public void NewLeaderboardEntry(string email, int score, int level)&#10;    {&#10;        StartCoroutine(SendEmailCoroutine(email, score, level));&#10;    }&#10;    &#10;    private IEnumerator SendEmailCoroutine(string playerEmail, int score, int level)&#10;    {&#10;        // 1. Logowanie anonimowe i pobranie ID Token&#10;        string idToken = null;&#10;        yield return StartCoroutine(GetFirebaseAnonymousToken(token =&gt; idToken = token));&#10;&#10;        if (string.IsNullOrEmpty(idToken))&#10;        {&#10;            Debug.LogError(&quot;Nie udało się pobrać ID Token.&quot;);&#10;            yield break;&#10;        }&#10;&#10;        // 2. Wysyłka danych do funkcji Firebase&#10;        PlayerEmailData data = level switch&#10;        {&#10;            1 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score1 = score },&#10;            2 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score2 = score },&#10;            3 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score3 = score },&#10;            4 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score4 = score },&#10;            5 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score5 = score }&#10;        };&#10;&#10;        string json = JsonUtility.ToJson(data);&#10;        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);&#10;&#10;        UnityWebRequest www = new UnityWebRequest(firebaseFunctionUrl, &quot;POST&quot;);&#10;        www.uploadHandler = new UploadHandlerRaw(bodyRaw);&#10;        www.downloadHandler = new DownloadHandlerBuffer();&#10;        www.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;        www.SetRequestHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + idToken);&#10;&#10;        yield return www.SendWebRequest();&#10;&#10;        if (www.result == UnityWebRequest.Result.Success)&#10;        {&#10;            Debug.Log(&quot;Email wysłany: &quot; + www.downloadHandler.text);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;Błąd wysyłki: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;        }&#10;    }&#10;    &#10;    private IEnumerator GetFirebaseAnonymousToken(System.Action&lt;string&gt; callback)&#10;    {&#10;        string url = $&quot;https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={apiKey}&quot;;&#10;&#10;        UnityWebRequest www = UnityWebRequest.PostWwwForm(url, &quot;&quot;); // POST z pustym body&#10;        www.downloadHandler = new DownloadHandlerBuffer();&#10;&#10;        yield return www.SendWebRequest();&#10;&#10;        if (www.result == UnityWebRequest.Result.Success)&#10;        {&#10;            var json = www.downloadHandler.text;&#10;            var response = JsonUtility.FromJson&lt;FirebaseAuthResponse&gt;(json);&#10;            callback?.Invoke(response.idToken);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;Błąd logowania anonimowego: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;            callback?.Invoke(null);&#10;        }&#10;    }&#10;    &#10;    /*private void GetLeaderboard()&#10;    {&#10;        LeaderboardCreator.GetLeaderboard(PublicLeaderboardKey, leaderboard =&gt;&#10;        {&#10;            int loopLenght = leaderboard.Length &lt; highScoreText.Count ? leaderboard.Length : highScoreText.Count;&#10;            for (int i  = 0; i &lt; loopLenght; i++)&#10;            {&#10;                highScoreText[i].text = leaderboard[i].Username + &quot;: &quot; + leaderboard[i].Score;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void NewLeaderboardEntry(string playerName, string playerEmail, int score)&#10;    {&#10;        LeaderboardCreator.UploadNewEntry(PublicLeaderboardKey, playerName, score, playerEmail);&#10;    }*/&#10;    &#10;    #endregion&#10;    &#10;    #region Score Management&#10;&#10;    private void AddScore(float points)&#10;    {&#10;        currentScore += points;&#10;        UpdateScoreDisplay();&#10;    }&#10;    &#10;    private void UpdateScoreDisplay()&#10;    {&#10;        if (scoreText)&#10;        {&#10;            scoreText.text = $&quot;Wynik: {currentScore:F0} | {lvlIndex} poziom&quot;;&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region UI Interaction&#10;&#10;    private void ShowPanel(GameState gameState, bool show = true)&#10;    {&#10;        switch (gameState)&#10;        {&#10;            case GameState.Playing:&#10;                ShowGameUI(show);&#10;                break;&#10;            case GameState.GameOver:&#10;                ShowGameOverPanel(show);&#10;                break;&#10;            default:&#10;                Debug.LogWarning(&quot;Nieznany stan gry!&quot;);&#10;                break;&#10;        }&#10;    }&#10;    &#10;    private void ShowGameUI(bool show)&#10;    {&#10;        Debug.Log(&quot;4. Wyświetlanie panelu gry.&quot;);&#10;        Character.CanMove = true;&#10;        Time.timeScale = 1f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(!show);&#10;        if (gameUI) gameUI.SetActive(show);&#10;    }&#10;    &#10;    private void ShowGameOverPanel(bool show)&#10;    {&#10;        Debug.Log(&quot;5. Wyświetlanie panelu końca gry.&quot;);&#10;        Character.CanMove = false;&#10;        Time.timeScale = 0f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region Game Over Management&#10;    &#10;    public void GameOver()&#10;    {&#10;        // Zatrzymaj dodawanie punktów&#10;        Character.CanMove = false;&#10;        &#10;        // Pokaż panel końca gry&#10;        ShowPanel(GameState.GameOver);&#10;        &#10;        // Zaktualizuj wyświetlany wynik końcowy&#10;        if (gameOverScoreText)&#10;        {&#10;            gameOverScoreText.text = $&quot;Twój wynik: {currentScore:F0} | {lvlIndex} poziom&quot;;&#10;        }&#10;        &#10;        NewLeaderboardEntry(loginManager.currentPlayerEmail, Mathf.RoundToInt(currentScore), lvlIndex);&#10;    }&#10;&#10;    public void RestartGame()&#10;    {&#10;        currentScore = 0f;&#10;        scoreMultiplier = 1f;&#10;        SceneManager.LoadScene(lvlIndex);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    &#10;    public void DeletePlayerDataAndRestart()&#10;    {&#10;        loginManager.DeletePlayerPrefs();&#10;        SceneManager.LoadScene(0);&#10;    }&#10;}&#10;&#10;public enum GameState&#10;{&#10;    Playing,&#10;    GameOver&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.Text;&#10;using UnityEngine;&#10;using TMPro;&#10;using Dan.Main;&#10;using UnityEngine.Networking;&#10;using UnityEngine.SceneManagement;&#10;&#10;public class HighScoreManager : MonoBehaviour&#10;{&#10;    #region Variables&#10;    &#10;    public static HighScoreManager Instance;&#10;    [SerializeField] int lvlIndex = 0; // Index of the level, used for leaderboard management&#10;    private LoginManager loginManager;&#10;    //private const string PublicLeaderboardKey = &quot;88e3d223505ea86807694065498f0b36ec49e2f3ea09970d31d77d5af4d5807b&quot;;&#10;    &#10;    private string apiKey = &quot;AIzaSyDyi7jzBfePmYyPj_rSsf7rIMADP-3fUb4&quot;;&#10;    private string firebaseFunctionUrl = &quot;https://addemail-zblptdvtpq-lm.a.run.app&quot;;&#10;    &#10;    [Header(&quot;Game UI&quot;)]&#10;    [SerializeField] private GameObject gameUI;&#10;    //[SerializeField] private List&lt;TextMeshProUGUI&gt; highScoreText;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    &#10;    private float currentScore = 0f;&#10;    private float scoreMultiplier = 1f;&#10;&#10;    [Header(&quot;Game Over Panel&quot;)]&#10;    [SerializeField] private TextMeshProUGUI gameOverScoreText;&#10;    [SerializeField] private GameObject gameOverPanel;&#10;    &#10;    #endregion&#10;    &#10;    #region Unity Methods&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;            //DontDestroyOnLoad(gameObject);&#10;        }&#10;        else if (Instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        lvlIndex = SceneManager.GetActiveScene().buildIndex;&#10;        loginManager = LoginManager.Instance;&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        Time.timeScale = 1f;&#10;        //GetLeaderboard();&#10;        UpdateScoreDisplay();&#10;        ShowPanel(GameState.Playing);&#10;    }&#10;    &#10;    private void Update()&#10;    &#10;    {&#10;        // Zwiększaj wynik w czasie (punkty za przetrwanie)&#10;        if (Character.CanMove)&#10;        {&#10;            AddScore(Time.deltaTime * 10f * scoreMultiplier);&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;&#10;    #region Leaderboard Management&#10;&#10;    public void NewLeaderboardEntry(string email, int score, int level)&#10;    {&#10;        StartCoroutine(SendEmailCoroutine(email, score, level));&#10;    }&#10;    &#10;    private IEnumerator SendEmailCoroutine(string playerEmail, int score, int level)&#10;    {&#10;        // 1. Logowanie anonimowe i pobranie ID Token&#10;        string idToken = null;&#10;        yield return StartCoroutine(GetFirebaseAnonymousToken(token =&gt; idToken = token));&#10;&#10;        if (string.IsNullOrEmpty(idToken))&#10;        {&#10;            Debug.LogError(&quot;Nie udało się pobrać ID Token.&quot;);&#10;            yield break;&#10;        }&#10;&#10;        // 2. Wysyłka danych do funkcji Firebase&#10;        PlayerEmailData data = level switch&#10;        {&#10;            1 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score1 = score },&#10;            2 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score2 = score },&#10;            3 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score3 = score },&#10;            4 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score4 = score },&#10;            5 =&gt; new PlayerEmailData { email = playerEmail, name = loginManager.currentPlayerName, score5 = score }&#10;        };&#10;&#10;        string json = JsonUtility.ToJson(data);&#10;        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);&#10;&#10;        UnityWebRequest www = new UnityWebRequest(firebaseFunctionUrl, &quot;POST&quot;);&#10;        www.uploadHandler = new UploadHandlerRaw(bodyRaw);&#10;        www.downloadHandler = new DownloadHandlerBuffer();&#10;        www.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;        www.SetRequestHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + idToken);&#10;&#10;        yield return www.SendWebRequest();&#10;&#10;        if (www.result == UnityWebRequest.Result.Success)&#10;        {&#10;            Debug.Log(&quot;Email wysłany: &quot; + www.downloadHandler.text);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;Błąd wysyłki: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;        }&#10;    }&#10;    &#10;    private IEnumerator GetFirebaseAnonymousToken(System.Action&lt;string&gt; callback)&#10;    {&#10;        string url = $&quot;https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={apiKey}&quot;;&#10;&#10;        UnityWebRequest www = UnityWebRequest.PostWwwForm(url, &quot;&quot;); // POST z pustym body&#10;        www.downloadHandler = new DownloadHandlerBuffer();&#10;&#10;        yield return www.SendWebRequest();&#10;&#10;        if (www.result == UnityWebRequest.Result.Success)&#10;        {&#10;            var json = www.downloadHandler.text;&#10;            var response = JsonUtility.FromJson&lt;FirebaseAuthResponse&gt;(json);&#10;            callback?.Invoke(response.idToken);&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;Błąd logowania anonimowego: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;            callback?.Invoke(null);&#10;        }&#10;    }&#10;    &#10;    /*private void GetLeaderboard()&#10;    {&#10;        LeaderboardCreator.GetLeaderboard(PublicLeaderboardKey, leaderboard =&gt;&#10;        {&#10;            int loopLenght = leaderboard.Length &lt; highScoreText.Count ? leaderboard.Length : highScoreText.Count;&#10;            for (int i  = 0; i &lt; loopLenght; i++)&#10;            {&#10;                highScoreText[i].text = leaderboard[i].Username + &quot;: &quot; + leaderboard[i].Score;&#10;            }&#10;        });&#10;    }&#10;&#10;    public void NewLeaderboardEntry(string playerName, string playerEmail, int score)&#10;    {&#10;        LeaderboardCreator.UploadNewEntry(PublicLeaderboardKey, playerName, score, playerEmail);&#10;    }*/&#10;    &#10;    #endregion&#10;    &#10;    #region Score Management&#10;&#10;    private void AddScore(float points)&#10;    {&#10;        currentScore += points;&#10;        UpdateScoreDisplay();&#10;    }&#10;    &#10;    private void UpdateScoreDisplay()&#10;    {&#10;        if (scoreText)&#10;        {&#10;            scoreText.text = $&quot;Wynik: {currentScore:F0} | {lvlIndex} poziom&quot;;&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region UI Interaction&#10;&#10;    private void ShowPanel(GameState gameState, bool show = true)&#10;    {&#10;        switch (gameState)&#10;        {&#10;            case GameState.Playing:&#10;                ShowGameUI(show);&#10;                break;&#10;            case GameState.GameOver:&#10;                ShowGameOverPanel(show);&#10;                break;&#10;            default:&#10;                Debug.LogWarning(&quot;Nieznany stan gry!&quot;);&#10;                break;&#10;        }&#10;    }&#10;    &#10;    private void ShowGameUI(bool show)&#10;    {&#10;        Debug.Log(&quot;4. Wyświetlanie panelu gry.&quot;);&#10;        Character.CanMove = true;&#10;        Time.timeScale = 1f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(!show);&#10;        if (gameUI) gameUI.SetActive(show);&#10;    }&#10;    &#10;    private void ShowGameOverPanel(bool show)&#10;    {&#10;        Debug.Log(&quot;5. Wyświetlanie panelu końca gry.&quot;);&#10;        Character.CanMove = false;&#10;        Time.timeScale = 0f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region Game Over Management&#10;    &#10;    public void GameOver()&#10;    {&#10;        // Zatrzymaj dodawanie punktów&#10;        Character.CanMove = false;&#10;        &#10;        // Pokaż panel końca gry&#10;        ShowPanel(GameState.GameOver);&#10;        &#10;        // Zaktualizuj wyświetlany wynik końcowy&#10;        if (gameOverScoreText)&#10;        {&#10;            gameOverScoreText.text = $&quot;Twój wynik: {currentScore:F0} | {lvlIndex} poziom&quot;;&#10;        }&#10;        &#10;        NewLeaderboardEntry(loginManager.currentPlayerEmail, Mathf.RoundToInt(currentScore), lvlIndex);&#10;    }&#10;&#10;    public void RestartGame()&#10;    {&#10;        currentScore = 0f;&#10;        scoreMultiplier = 1f;&#10;        SceneManager.LoadScene(lvlIndex);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    &#10;    public void DeletePlayerDataAndRestart()&#10;    {&#10;        loginManager.DeletePlayerPrefs();&#10;        SceneManager.LoadScene(0);&#10;    }&#10;}&#10;&#10;public enum GameState&#10;{&#10;    Playing,&#10;    GameOver&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/PlayerEmailData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/PlayerEmailData.cs" />
              <option name="updatedContent" value="[System.Serializable]&#10;public class PlayerEmailData&#10;{&#10;    public string email;&#10;    public string name;&#10;    public int score1;&#10;    public int score2;&#10;    public int score3;&#10;    public int score4;&#10;    public int score5;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>