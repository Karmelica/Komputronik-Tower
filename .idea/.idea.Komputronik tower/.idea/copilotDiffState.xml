<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;using TMPro;&#10;&#10;[System.Serializable]&#10;public class PlayerScore&#10;{&#10;    public string playerEmail;&#10;    public float highScore;&#10;    public string playerName;&#10;    &#10;    public PlayerScore(string email, float score, string name = &quot;&quot;)&#10;    {&#10;        playerEmail = email;&#10;        highScore = score;&#10;        playerName = name;&#10;    }&#10;}&#10;&#10;public class HighScoreManager : MonoBehaviour&#10;{&#10;    private static HighScoreManager instance;&#10;    public static HighScoreManager Instance&#10;    {&#10;        get&#10;        {&#10;            if (instance == null)&#10;            {&#10;                instance = FindObjectOfType&lt;HighScoreManager&gt;();&#10;                if (instance == null)&#10;                {&#10;                    GameObject go = new GameObject(&quot;HighScoreManager&quot;);&#10;                    instance = go.AddComponent&lt;HighScoreManager&gt;();&#10;                    DontDestroyOnLoad(go);&#10;                }&#10;            }&#10;            return instance;&#10;        }&#10;    }&#10;&#10;    [SerializeField] private TMP_InputField emailInputField;&#10;    [SerializeField] private TMP_InputField nameInputField;&#10;    [SerializeField] private TextMeshProUGUI highScoreText;&#10;    [SerializeField] private TextMeshProUGUI currentPlayerText;&#10;    [SerializeField] private GameObject loginPanel;&#10;    [SerializeField] private GameObject gameUI;&#10;&#10;    private string currentPlayerEmail = &quot;&quot;;&#10;    private string currentPlayerName = &quot;&quot;;&#10;    private float currentSessionScore = 0f;&#10;&#10;    private const string CURRENT_PLAYER_KEY = &quot;CurrentPlayer&quot;;&#10;    private const string PLAYER_NAME_KEY = &quot;PlayerName&quot;;&#10;    private const string SCORES_COUNT_KEY = &quot;ScoresCount&quot;;&#10;&#10;    private void Awake()&#10;    {&#10;        if (instance == null)&#10;        {&#10;            instance = this;&#10;            DontDestroyOnLoad(gameObject);&#10;            LoadCurrentPlayer();&#10;        }&#10;        else if (instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;    }&#10;&#10;    private void Start()&#10;    {&#10;        if (string.IsNullOrEmpty(currentPlayerEmail))&#10;        {&#10;            ShowLoginPanel();&#10;        }&#10;        else&#10;        {&#10;            ShowGameUI();&#10;            UpdateHighScoreDisplay();&#10;        }&#10;    }&#10;&#10;    public void LoginPlayer()&#10;    {&#10;        string email = emailInputField.text.Trim();&#10;        string name = nameInputField.text.Trim();&#10;&#10;        if (string.IsNullOrEmpty(email))&#10;        {&#10;            Debug.LogWarning(&quot;Email nie może być pusty!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!IsValidEmail(email))&#10;        {&#10;            Debug.LogWarning(&quot;Nieprawidłowy format email!&quot;);&#10;            return;&#10;        }&#10;&#10;        currentPlayerEmail = email;&#10;        currentPlayerName = string.IsNullOrEmpty(name) ? email : name;&#10;&#10;        SaveCurrentPlayer();&#10;        ShowGameUI();&#10;        UpdateHighScoreDisplay();&#10;    }&#10;&#10;    public void LogoutPlayer()&#10;    {&#10;        currentPlayerEmail = &quot;&quot;;&#10;        currentPlayerName = &quot;&quot;;&#10;        PlayerPrefs.DeleteKey(CURRENT_PLAYER_KEY);&#10;        PlayerPrefs.DeleteKey(PLAYER_NAME_KEY);&#10;        PlayerPrefs.Save();&#10;        ShowLoginPanel();&#10;    }&#10;&#10;    public void UpdateScore(float newScore)&#10;    {&#10;        currentSessionScore = newScore;&#10;        &#10;        if (string.IsNullOrEmpty(currentPlayerEmail))&#10;            return;&#10;&#10;        float currentHighScore = GetPlayerHighScore(currentPlayerEmail);&#10;        &#10;        if (newScore &gt; currentHighScore)&#10;        {&#10;            SavePlayerHighScore(currentPlayerEmail, newScore, currentPlayerName);&#10;            UpdateHighScoreDisplay();&#10;        }&#10;    }&#10;&#10;    public float GetPlayerHighScore(string email)&#10;    {&#10;        return PlayerPrefs.GetFloat($&quot;HighScore_{email}&quot;, 0f);&#10;    }&#10;&#10;    public string GetPlayerName(string email)&#10;    {&#10;        return PlayerPrefs.GetString($&quot;Name_{email}&quot;, email);&#10;    }&#10;&#10;    private void SavePlayerHighScore(string email, float score, string name)&#10;    {&#10;        PlayerPrefs.SetFloat($&quot;HighScore_{email}&quot;, score);&#10;        PlayerPrefs.SetString($&quot;Name_{email}&quot;, name);&#10;        PlayerPrefs.Save();&#10;    }&#10;&#10;    private void SaveCurrentPlayer()&#10;    {&#10;        PlayerPrefs.SetString(CURRENT_PLAYER_KEY, currentPlayerEmail);&#10;        PlayerPrefs.SetString(PLAYER_NAME_KEY, currentPlayerName);&#10;        PlayerPrefs.Save();&#10;    }&#10;&#10;    private void LoadCurrentPlayer()&#10;    {&#10;        currentPlayerEmail = PlayerPrefs.GetString(CURRENT_PLAYER_KEY, &quot;&quot;);&#10;        currentPlayerName = PlayerPrefs.GetString(PLAYER_NAME_KEY, &quot;&quot;);&#10;    }&#10;&#10;    private void UpdateHighScoreDisplay()&#10;    {&#10;        if (string.IsNullOrEmpty(currentPlayerEmail))&#10;            return;&#10;&#10;        float highScore = GetPlayerHighScore(currentPlayerEmail);&#10;        &#10;        if (highScoreText != null)&#10;            highScoreText.text = $&quot;Najlepszy wynik: {highScore:F0}&quot;;&#10;        &#10;        if (currentPlayerText != null)&#10;            currentPlayerText.text = $&quot;Gracz: {currentPlayerName}&quot;;&#10;    }&#10;&#10;    private void ShowLoginPanel()&#10;    {&#10;        if (loginPanel != null) loginPanel.SetActive(true);&#10;        if (gameUI != null) gameUI.SetActive(false);&#10;    }&#10;&#10;    private void ShowGameUI()&#10;    {&#10;        if (loginPanel != null) loginPanel.SetActive(false);&#10;        if (gameUI != null) gameUI.SetActive(true);&#10;    }&#10;&#10;    private bool IsValidEmail(string email)&#10;    {&#10;        try&#10;        {&#10;            var addr = new System.Net.Mail.MailAddress(email);&#10;            return addr.Address == email;&#10;        }&#10;        catch&#10;        {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public string GetCurrentPlayerEmail()&#10;    {&#10;        return currentPlayerEmail;&#10;    }&#10;&#10;    public string GetCurrentPlayerName()&#10;    {&#10;        return currentPlayerName;&#10;    }&#10;&#10;    public float GetCurrentSessionScore()&#10;    {&#10;        return currentSessionScore;&#10;    }&#10;&#10;    // Metoda do pobierania listy najlepszych wyników (opcjonalne)&#10;    public List&lt;PlayerScore&gt; GetTopScores(int count = 10)&#10;    {&#10;        List&lt;PlayerScore&gt; topScores = new List&lt;PlayerScore&gt;();&#10;        &#10;        // Ponieważ PlayerPrefs nie pozwala na iterację kluczy,&#10;        // możemy przechowywać listę graczy osobno&#10;        int playersCount = PlayerPrefs.GetInt(SCORES_COUNT_KEY, 0);&#10;        &#10;        for (int i = 0; i &lt; playersCount; i++)&#10;        {&#10;            string email = PlayerPrefs.GetString($&quot;Player_{i}&quot;, &quot;&quot;);&#10;            if (!string.IsNullOrEmpty(email))&#10;            {&#10;                float score = GetPlayerHighScore(email);&#10;                string name = GetPlayerName(email);&#10;                topScores.Add(new PlayerScore(email, score, name));&#10;            }&#10;        }&#10;        &#10;        topScores.Sort((a, b) =&gt; b.highScore.CompareTo(a.highScore));&#10;        &#10;        if (topScores.Count &gt; count)&#10;            topScores = topScores.GetRange(0, count);&#10;        &#10;        return topScores;&#10;    }&#10;&#10;    // Metoda do rejestracji nowego gracza w liście&#10;    private void RegisterPlayer(string email)&#10;    {&#10;        int playersCount = PlayerPrefs.GetInt(SCORES_COUNT_KEY, 0);&#10;        &#10;        // Sprawdź czy gracz już istnieje&#10;        for (int i = 0; i &lt; playersCount; i++)&#10;        {&#10;            if (PlayerPrefs.GetString($&quot;Player_{i}&quot;, &quot;&quot;) == email)&#10;                return;&#10;        }&#10;        &#10;        // Dodaj nowego gracza&#10;        PlayerPrefs.SetString($&quot;Player_{playersCount}&quot;, email);&#10;        PlayerPrefs.SetInt(SCORES_COUNT_KEY, playersCount + 1);&#10;        PlayerPrefs.Save();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Score.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Score.cs" />
              <option name="originalContent" value="using System;&#10;using TMPro;&#10;using UnityEngine;&#10;&#10;public class Score : MonoBehaviour&#10;{&#10;    private float score = 0;&#10;    private float multiplier = 1f;&#10;    private Rigidbody2D _playerRb2D;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    [SerializeField] private Character player;&#10;    &#10;    private float highestYPosition = 0f;&#10;&#10;    private void Start()&#10;    {&#10;        if(!player.TryGetComponent&lt;Rigidbody2D&gt;(out _playerRb2D))&#10;        {&#10;            Debug.LogError(&quot;No Rigidbody2D component found on the player.&quot;, this);&#10;        }&#10;        highestYPosition = player.transform.position.y;&#10;    }&#10;&#10;    private void Update()&#10;    {&#10;        if (player.transform.position.y &gt; highestYPosition)&#10;        {&#10;            multiplier = _playerRb2D.linearVelocity.magnitude; // Example multiplier based on velocity, adjust as needed&#10;            multiplier = Mathf.Clamp(multiplier, 1f, 20f);&#10;            score += (player.transform.position.y - highestYPosition) * multiplier; // Adjust the multiplier as needed&#10;            highestYPosition = player.transform.position.y;&#10;        }&#10;        scoreText.text = score.ToString(&quot;F0&quot;); // Display score as an integer&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using TMPro;&#10;using UnityEngine;&#10;&#10;public class Score : MonoBehaviour&#10;{&#10;    private float score = 0;&#10;    private float multiplier = 1f;&#10;    private Rigidbody2D _playerRb2D;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    [SerializeField] private Character player;&#10;    &#10;    private float highestYPosition = 0f;&#10;&#10;    private void Start()&#10;    {&#10;        if(!player.TryGetComponent&lt;Rigidbody2D&gt;(out _playerRb2D))&#10;        {&#10;            Debug.LogError(&quot;No Rigidbody2D component found on the player.&quot;, this);&#10;        }&#10;        highestYPosition = player.transform.position.y;&#10;    }&#10;&#10;    private void Update()&#10;    {&#10;        if (player.transform.position.y &gt; highestYPosition)&#10;        {&#10;            multiplier = _playerRb2D.linearVelocity.magnitude; // Example multiplier based on velocity, adjust as needed&#10;            multiplier = Mathf.Clamp(multiplier, 1f, 20f);&#10;            score += (player.transform.position.y - highestYPosition) * multiplier; // Adjust the multiplier as needed&#10;            highestYPosition = player.transform.position.y;&#10;            &#10;            // Aktualizuj wynik w HighScoreManager&#10;            if (HighScoreManager.Instance != null)&#10;            {&#10;                HighScoreManager.Instance.UpdateScore(score);&#10;            }&#10;        }&#10;        scoreText.text = score.ToString(&quot;F0&quot;); // Display score as an integer&#10;    }&#10;    &#10;    // Metoda publiczna do pobierania aktualnego wyniku&#10;    public float GetCurrentScore()&#10;    {&#10;        return score;&#10;    }&#10;    &#10;    // Metoda do resetowania wyniku (np. przy rozpoczęciu nowej gry)&#10;    public void ResetScore()&#10;    {&#10;        score = 0;&#10;        highestYPosition = player.transform.position.y;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>