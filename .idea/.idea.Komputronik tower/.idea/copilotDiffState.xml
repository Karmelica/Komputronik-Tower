<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Score.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Score.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using TMPro;&#10;&#10;public class Score : MonoBehaviour&#10;{&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    [SerializeField] private TextMeshProUGUI gameOverScoreText;&#10;    [SerializeField] private GameObject gameOverPanel;&#10;    &#10;    private float currentScore = 0f;&#10;    private float scoreMultiplier = 1f;&#10;    &#10;    public static Score Instance;&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        UpdateScoreDisplay();&#10;    }&#10;    &#10;    private void Update()&#10;    {&#10;        // Zwiększaj wynik w czasie (punkty za przetrwanie)&#10;        if (Character.CanMove)&#10;        {&#10;            AddScore(Time.deltaTime * 10f * scoreMultiplier);&#10;        }&#10;    }&#10;    &#10;    public void AddScore(float points)&#10;    {&#10;        currentScore += points;&#10;        UpdateScoreDisplay();&#10;    }&#10;    &#10;    public void SetScoreMultiplier(float multiplier)&#10;    {&#10;        scoreMultiplier = multiplier;&#10;    }&#10;    &#10;    public float GetCurrentScore()&#10;    {&#10;        return currentScore;&#10;    }&#10;    &#10;    public void GameOver()&#10;    {&#10;        // Zatrzymaj dodawanie punktów&#10;        Character.CanMove = false;&#10;        &#10;        // Zapisz wynik do HighScoreManager&#10;        if (HighScoreManager.Instance != null)&#10;        {&#10;            HighScoreManager.Instance.UpdateScore(currentScore);&#10;        }&#10;        &#10;        // Pokaż panel końca gry&#10;        if (gameOverPanel != null)&#10;        {&#10;            gameOverPanel.SetActive(true);&#10;        }&#10;        &#10;        // Zaktualizuj wyświetlany wynik końcowy&#10;        if (gameOverScoreText != null)&#10;        {&#10;            gameOverScoreText.text = $&quot;Twój wynik: {currentScore:F0}&quot;;&#10;        }&#10;    }&#10;    &#10;    public void RestartGame()&#10;    {&#10;        currentScore = 0f;&#10;        scoreMultiplier = 1f;&#10;        UpdateScoreDisplay();&#10;        &#10;        if (gameOverPanel != null)&#10;        {&#10;            gameOverPanel.SetActive(false);&#10;        }&#10;        &#10;        Character.CanMove = true;&#10;    }&#10;    &#10;    private void UpdateScoreDisplay()&#10;    {&#10;        if (scoreText != null)&#10;        {&#10;            scoreText.text = $&quot;Wynik: {currentScore:F0}&quot;;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>