<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/HighScoreManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using System.Text;&#10;using UnityEngine;&#10;using TMPro;&#10;using UnityEngine.Networking;&#10;using UnityEngine.SceneManagement;&#10;using UnityEngine.InputSystem;&#10;using System.Collections.Generic; // percentyl&#10;using System.Linq;&#10;using UnityEngine.EventSystems; // percentyl&#10;&#10;public class HighScoreManager : MonoBehaviour&#10;{&#10;    #region Variables&#10;&#10;    public bool infiniteGeneration;&#10;    public bool moveStarted;&#10;&#10;&#10;    private InputSystemActions _inputActions;&#10;    &#10;    public static HighScoreManager Instance;&#10;    [SerializeField] int lvlIndex; // Index of the level, used for leaderboard management&#10;    private LoginManager loginManager;&#10;    private string playerId;&#10;&#10;    private const string FIREBASE_FUNCTION_URL = &quot;https://addemail-zblptdvtpq-lm.a.run.app&quot;;&#10;    &#10;    [Header(&quot;Leaderboard Cache&quot;)]&#10;    private List&lt;float&gt; _cachedScores = new List&lt;float&gt;();&#10;    private int _cachedLevel = -1;&#10;    private bool _scoresReady;&#10;    &#10;    [Header(&quot;Game UI&quot;)]&#10;    [SerializeField] private GameObject gameUI;&#10;    //[SerializeField] private List&lt;TextMeshProUGUI&gt; highScoreText;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    &#10;    private float _currentScore;&#10;&#10;    [Header(&quot;Game Over Panel&quot;)]&#10;    [SerializeField] private TextMeshProUGUI gameOverScoreText;&#10;    [SerializeField] private GameObject gameOverPanel;&#10;    &#10;    [Header(&quot;Pause menu panel&quot;)]&#10;    [SerializeField] private GameObject pauseMenu;&#10;    &#10;    // --- Percentyl ---&#10;    [Header(&quot;Percentyl wyniku&quot;)]&#10;    [SerializeField] private TextMeshProUGUI percentileText; // przypisz w Inspector (panel GameOver)&#10;    &#10;    private SoundPlayer _soundPlayer;&#10;    &#10;    #endregion&#10;    &#10;    #region Unity Methods&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;            //DontDestroyOnLoad(gameObject);&#10;        }&#10;        else if (Instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        _inputActions = new InputSystemActions();&#10;        lvlIndex = SceneManager.GetActiveScene().buildIndex;&#10;        loginManager = LoginManager.Instance;&#10;        //playerId = GetOrCreatePlayerId();&#10;        _soundPlayer = GetComponent&lt;SoundPlayer&gt;();&#10;        &#10;        // Inicjalizuj FirebaseAuthManager jeśli LoginManager nie jest dostępny&#10;        if (loginManager == null)&#10;        {&#10;            FirebaseAuthManager.Initialize(this);&#10;        }&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        Time.timeScale = 1f;&#10;        //GetLeaderboard();&#10;        UpdateScoreDisplay();&#10;        ShowPanel(GameState.Playing);&#10;        if (percentileText) percentileText.text = &quot;&quot;; // wyczysc na starcie&#10;        StartCoroutine(PreloadScores(lvlIndex));&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        _inputActions.Enable();&#10;        _inputActions.Player.Escape.performed += OnEscape;&#10;    }&#10;&#10;    private void OnDisable()&#10;    {&#10;        _inputActions.Disable();&#10;        _inputActions.Player.Escape.performed -= OnEscape;&#10;    }&#10;    &#10;    /*private void Update()&#10;    {&#10;        // Zwiększaj wynik w czasie (punkty za przetrwanie)&#10;        if (CharacterMovement.CanMove &amp;&amp; !segmentLimited &amp;&amp; moveStarted)&#10;        {&#10;            AddScore(Time.deltaTime * scoreMultiplier);&#10;        }&#10;    }*/&#10;    &#10;    #endregion&#10;&#10;    #region Leaderboard Management&#10;&#10;    public void NewLeaderboardEntry(string email, string playerName, float score, int level)&#10;    {&#10;        StartCoroutine(SendDataCoroutine(email, playerName, score, level));&#10;    }&#10;    &#10;    private IEnumerator SendDataCoroutine(string playerEmail, string playerName, float score, int level)&#10;    {&#10;        // Użyj nowego FirebaseAuthManager zamiast własnej implementacji&#10;        string idToken = null;&#10;        FirebaseAuthManager.GetValidToken(token =&gt; idToken = token);&#10;        &#10;        // Poczekaj na token&#10;        yield return new WaitUntil(() =&gt; idToken != null || !FirebaseAuthManager.IsAuthenticated());&#10;&#10;        if (string.IsNullOrEmpty(idToken))&#10;        {&#10;            Debug.LogError(&quot;Nie udało się pobrać ID Token z FirebaseAuthManager.&quot;);&#10;            yield break;&#10;        }&#10;&#10;        // 2. Wysyłka danych do funkcji Firebase&#10;        PlayerEmailData data = level switch&#10;        {&#10;            1 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score1 = score },&#10;            2 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score2 = score },&#10;            3 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score3 = score },&#10;            4 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score4 = score },&#10;            5 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score5 = score },&#10;            6 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score6 = PlayerPrefs.GetInt(&quot;LevelsCompleted&quot;, 0) &gt;= 5 ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0) : 0 },&#10;            _ =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName }&#10;        };&#10;&#10;        string json = JsonUtility.ToJson(data);&#10;        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);&#10;&#10;        using (UnityWebRequest www = new UnityWebRequest(FIREBASE_FUNCTION_URL, &quot;POST&quot;))&#10;        {&#10;            www.uploadHandler = new UploadHandlerRaw(bodyRaw);&#10;            www.downloadHandler = new DownloadHandlerBuffer();&#10;            www.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;            www.SetRequestHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + idToken);&#10;            www.timeout = 10; // Dodaj timeout&#10;&#10;            yield return www.SendWebRequest();&#10;&#10;            if (www.result != UnityWebRequest.Result.Success)&#10;            {&#10;                Debug.LogError(&quot;Błąd wysyłki: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;            }&#10;            else&#10;            {&#10;                // po udanej wysyłce oblicz percentyl&#10;                StartCoroutine(RefreshScoresAfterSubmit(level));&#10;            }&#10;        }&#10;    }&#10;    &#10;    // ===== Percentyl =====&#10;    [Serializable]&#10;    private class ScoreListDto { public List&lt;float&gt; scores; }&#10;&#10;   private IEnumerator PreloadScores(int level)&#10;    {&#10;        _scoresReady = false;&#10;        _cachedLevel = level;&#10;        string url = $&quot;https://scores-zblptdvtpq-lm.a.run.app?level={level}&quot;;&#10;        using (UnityWebRequest www = UnityWebRequest.Get(url))&#10;        {&#10;            yield return www.SendWebRequest();&#10;            if (www.result == UnityWebRequest.Result.Success)&#10;            {&#10;                try&#10;                {&#10;                    var dto = JsonUtility.FromJson&lt;ScoreListDto&gt;(www.downloadHandler.text);&#10;                    _cachedScores = dto?.scores ?? new List&lt;float&gt;();&#10;                    _scoresReady = _cachedScores.Count &gt; 0;&#10;                }&#10;                catch&#10;                {&#10;                    _cachedScores = new List&lt;float&gt;();&#10;                    _scoresReady = false;&#10;                }&#10;            }&#10;            else&#10;            {&#10;                _cachedScores = new List&lt;float&gt;();&#10;                _scoresReady = false;&#10;            }&#10;        }&#10;    }&#10;   &#10;    private void ComputeAndShowPercentileFromCache(int level, float scoreToCompare)&#10;    {&#10;        if (!percentileText) return;&#10;&#10;        if (!_scoresReady || _cachedLevel != level || _cachedScores == null || _cachedScores.Count == 0)&#10;        {&#10;            percentileText.text = &quot;brak danych&quot;;&#10;            return;&#10;        }&#10;&#10;        bool lowerIsBetter = !infiniteGeneration;&#10;        float percentile = CalculatePercentile(_cachedScores, scoreToCompare, lowerIsBetter);&#10;        percentileText.text = $&quot;Twój najlepszy wynik jest lepszy od {percentile:F1}% graczy&quot;;&#10;    }&#10;    &#10;    private IEnumerator RefreshScoresAfterSubmit(int level)&#10;    {&#10;        yield return new WaitForSecondsRealtime(1.0f); // czas na propagację&#10;        yield return StartCoroutine(PreloadScores(level));&#10;&#10;        float scoreForComparison = infiniteGeneration&#10;            ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0)&#10;            : PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;&#10;        ComputeAndShowPercentileFromCache(level, scoreForComparison);&#10;    }&#10;&#10;    private float CalculatePercentile(List&lt;float&gt; allScores, float playerScore, bool lowerIsBetter)&#10;    {&#10;        if (allScores == null || allScores.Count == 0) return 0f;&#10;        int worse = lowerIsBetter ? allScores.Count(s =&gt; s &gt; playerScore) : allScores.Count(s =&gt; s &lt; playerScore);&#10;        return (float)worse / allScores.Count * 100f;&#10;    }&#10;    // ===== Koniec percentyla =====&#10;    &#10;    #endregion&#10;    &#10;    #region Score Management&#10;&#10;    public void AddScore(float points)&#10;    {&#10;        if(!CharacterMovement.levelEnded &amp;&amp; CharacterMovement.startCounting)&#10;        {&#10;            _currentScore += points;&#10;            UpdateScoreDisplay();&#10;        }&#10;    }&#10;    &#10;    private void UpdateScoreDisplay()&#10;    {&#10;        if (scoreText)&#10;        {&#10;            if (infiniteGeneration)&#10;            {&#10;                scoreText.text = $&quot;Wynik: {_currentScore:F0}&quot;;&#10;            }&#10;            else&#10;            {&#10;                int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;            &#10;                scoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}&quot;;&#10;            }&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region UI Interaction&#10;&#10;    private void ShowPanel(GameState gameState, bool show = true)&#10;    {&#10;        switch (gameState)&#10;        {&#10;            case GameState.Playing:&#10;                ShowGameUI(show);&#10;                break;&#10;            case GameState.GameOver:&#10;                ShowGameOverPanel(show);&#10;                break;&#10;            default:&#10;                Debug.LogWarning(&quot;Nieznany stan gry!&quot;);&#10;                break;&#10;        }&#10;    }&#10;&#10;    public void ShowPauseMenu(bool show)&#10;    {&#10;        Time.timeScale = show ? 0f : 1f;&#10;        CharacterMovement.CanMove = !show;&#10;        if (pauseMenu) pauseMenu.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    private void ShowGameUI(bool show)&#10;    {&#10;        //Debug.Log(&quot;4. Wyświetlanie panelu gry.&quot;);&#10;        CharacterMovement.CanMove = true;&#10;        Time.timeScale = 1f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(!show);&#10;        if (gameUI) gameUI.SetActive(show);&#10;    }&#10;    &#10;    public void ShowGameOverPanel(bool show)&#10;    {&#10;        //Debug.Log(&quot;5. Wyświetlanie panelu końca gry.&quot;);&#10;        CharacterMovement.CanMove = false;&#10;        Time.timeScale = 0f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region Game Over Management&#10;    &#10;    public void GameOver(bool fallen)&#10;    {&#10;        // Zatrzymaj dodawanie punktów&#10;        CharacterMovement.CanMove = false;&#10;&#10;        if (fallen) { _soundPlayer.PlayRandom(&quot;Fall&quot;); }&#10;        &#10;        // Pokaż panel końca gry&#10;        ShowPanel(GameState.GameOver);&#10;&#10;        if (SceneManager.GetActiveScene().buildIndex == 6)&#10;        {&#10;            // save aracde level highest score&#10;            int bestScore = PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0);&#10;&#10;            if (_currentScore &gt; bestScore)&#10;            {&#10;                PlayerPrefs.SetInt(&quot;ArcadeScore&quot;, (int)_currentScore);&#10;                PlayerPrefs.Save();&#10;            }&#10;        }&#10;        else {&#10;            // save other level highest score&#10;            float bestScore = PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;            if (_currentScore &lt; bestScore)&#10;            {&#10;                PlayerPrefs.SetFloat($&quot;{lvlIndex}_HighestScore&quot;, _currentScore);&#10;                PlayerPrefs.Save();&#10;            }&#10;        }&#10;        &#10;        // Zaktualizuj wyświetlany wynik końcowy&#10;        if (gameOverScoreText)&#10;        {&#10;            if(infiniteGeneration)&#10;            {&#10;                if(PlayerPrefs.HasKey(&quot;ArcadeScore&quot;))&#10;                {&#10;                    var bestArcadeScore = PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0);&#10;                    gameOverScoreText.text = $&quot;Twój wynik: {_currentScore:F0}\nNajlepszy wynik: {bestArcadeScore}&quot;;&#10;                }&#10;                else&#10;                {&#10;                    gameOverScoreText.text = $&quot;Twój wynik: {_currentScore:F0}&quot;;&#10;                }&#10;            }&#10;            else&#10;            {&#10;&#10;                if (PlayerPrefs.HasKey($&quot;{lvlIndex}_HighestScore&quot;))&#10;                {&#10;                    float bestScore = PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;                    int bestMinutes = Mathf.FloorToInt(bestScore / 60f);&#10;                    int bestSeconds = Mathf.FloorToInt(bestScore % 60f);&#10;                    int bestMiliseconds = Mathf.FloorToInt(bestScore * 1000f % 1000f);&#10;                    &#10;                    int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                    int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                    int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;                    &#10;                    gameOverScoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}\nNajlepszy czas: {bestMinutes:D2}:{bestSeconds:D2}:{bestMiliseconds:D3}&quot;;&#10;                }&#10;                else {&#10;                    int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                    int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                    int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;                    gameOverScoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}&quot;;&#10;                }&#10;            }&#10;        }&#10;&#10;        if (percentileText) percentileText.text = &quot;Sprawdzanie wyników...&quot;;&#10;        float scoreForComparison = infiniteGeneration&#10;            ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0)&#10;            : PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;        ComputeAndShowPercentileFromCache(lvlIndex, scoreForComparison);&#10;        &#10;        NewLeaderboardEntry(loginManager.currentPlayerEmail, loginManager.currentPlayerName, _currentScore, lvlIndex);&#10;    }&#10;    &#10;    public void ReturnToMainMenu()&#10;    {&#10;        Time.timeScale = 1f;&#10;        SceneManager.LoadScene(0);&#10;    }&#10;&#10;    public void RestartGame()&#10;    {&#10;        _currentScore = 0f;&#10;        SceneManager.LoadScene(lvlIndex);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    &#10;    public void DeletePlayerDataAndRestart()&#10;    {&#10;        loginManager.DeletePlayerPrefs();&#10;        SceneManager.LoadScene(0);&#10;    }&#10;&#10;    /*private string GetOrCreatePlayerId()&#10;    {&#10;        string player = PlayerPrefs.GetString(&quot;PlayerId&quot;, &quot;&quot;);&#10;&#10;        if (string.IsNullOrEmpty(player))&#10;        {&#10;            // Generuj nowe ID używając System.Guid&#10;            player = Guid.NewGuid().ToString();&#10;            PlayerPrefs.SetString(&quot;PlayerId&quot;, player);&#10;            PlayerPrefs.Save();&#10;        }&#10;&#10;        return player;&#10;    }*/&#10;&#10;    #region Input Actions&#10;&#10;    private void OnEscape(InputAction.CallbackContext context)&#10;    {&#10;        //ShowPanel(gameOverPanel.activeInHierarchy ? GameState.Playing : GameState.GameOver);&#10;        bool isActive = pauseMenu.activeInHierarchy;&#10;&#10;        ShowPauseMenu(!isActive);&#10;    }&#10;    &#10;    #endregion&#10;&#10;}&#10;&#10;public enum GameState&#10;{&#10;    Playing,&#10;    GameOver&#10;}" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using System.Text;&#10;using UnityEngine;&#10;using TMPro;&#10;using UnityEngine.Networking;&#10;using UnityEngine.SceneManagement;&#10;using UnityEngine.InputSystem;&#10;using System.Collections.Generic; // percentyl&#10;using System.Linq;&#10;using UnityEngine.EventSystems; // percentyl&#10;&#10;public class HighScoreManager : MonoBehaviour&#10;{&#10;    #region Variables&#10;&#10;    public bool infiniteGeneration;&#10;    public bool moveStarted;&#10;&#10;&#10;    private InputSystemActions _inputActions;&#10;    &#10;    public static HighScoreManager Instance;&#10;    [SerializeField] int lvlIndex; // Index of the level, used for leaderboard management&#10;    private LoginManager loginManager;&#10;    private string playerId;&#10;&#10;    private const string FIREBASE_FUNCTION_URL = &quot;https://addemail-zblptdvtpq-lm.a.run.app&quot;;&#10;    &#10;    [Header(&quot;Leaderboard Cache&quot;)]&#10;    private List&lt;float&gt; _cachedScores = new List&lt;float&gt;();&#10;    private int _cachedLevel = -1;&#10;    private bool _scoresReady;&#10;    &#10;    [Header(&quot;Game UI&quot;)]&#10;    [SerializeField] private GameObject gameUI;&#10;    //[SerializeField] private List&lt;TextMeshProUGUI&gt; highScoreText;&#10;    [SerializeField] private TextMeshProUGUI scoreText;&#10;    &#10;    private float _currentScore;&#10;&#10;    [Header(&quot;Game Over Panel&quot;)]&#10;    [SerializeField] private TextMeshProUGUI gameOverScoreText;&#10;    [SerializeField] private GameObject gameOverPanel;&#10;    &#10;    [Header(&quot;Pause menu panel&quot;)]&#10;    [SerializeField] private GameObject pauseMenu;&#10;    &#10;    // --- Percentyl ---&#10;    [Header(&quot;Percentyl wyniku&quot;)]&#10;    [SerializeField] private TextMeshProUGUI percentileText; // przypisz w Inspector (panel GameOver)&#10;    &#10;    private SoundPlayer _soundPlayer;&#10;    &#10;    #endregion&#10;    &#10;    #region Unity Methods&#10;    &#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;            //DontDestroyOnLoad(gameObject);&#10;        }&#10;        else if (Instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        _inputActions = new InputSystemActions();&#10;        lvlIndex = SceneManager.GetActiveScene().buildIndex;&#10;        loginManager = LoginManager.Instance;&#10;        //playerId = GetOrCreatePlayerId();&#10;        _soundPlayer = GetComponent&lt;SoundPlayer&gt;();&#10;        &#10;        // Inicjalizuj FirebaseAuthManager jeśli LoginManager nie jest dostępny&#10;        if (loginManager == null)&#10;        {&#10;            FirebaseAuthManager.Initialize(this);&#10;        }&#10;    }&#10;    &#10;    private void Start()&#10;    {&#10;        Time.timeScale = 1f;&#10;        //GetLeaderboard();&#10;        UpdateScoreDisplay();&#10;        ShowPanel(GameState.Playing);&#10;        if (percentileText) percentileText.text = &quot;&quot;; // wyczysc na starcie&#10;        StartCoroutine(PreloadScores(lvlIndex));&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        _inputActions.Enable();&#10;        _inputActions.Player.Escape.performed += OnEscape;&#10;    }&#10;&#10;    private void OnDisable()&#10;    {&#10;        _inputActions.Disable();&#10;        _inputActions.Player.Escape.performed -= OnEscape;&#10;    }&#10;    &#10;    /*private void Update()&#10;    {&#10;        // Zwiększaj wynik w czasie (punkty za przetrwanie)&#10;        if (CharacterMovement.CanMove &amp;&amp; !segmentLimited &amp;&amp; moveStarted)&#10;        {&#10;            AddScore(Time.deltaTime * scoreMultiplier);&#10;        }&#10;    }*/&#10;    &#10;    #endregion&#10;&#10;    #region Leaderboard Management&#10;&#10;    public void NewLeaderboardEntry(string email, string playerName, float score, int level)&#10;    {&#10;        StartCoroutine(SendDataCoroutine(email, playerName, score, level));&#10;    }&#10;    &#10;    private IEnumerator SendDataCoroutine(string playerEmail, string playerName, float score, int level)&#10;    {&#10;        // Użyj nowego FirebaseAuthManager zamiast własnej implementacji&#10;        string idToken = null;&#10;        FirebaseAuthManager.GetValidToken(token =&gt; idToken = token);&#10;        &#10;        // Poczekaj na token&#10;        yield return new WaitUntil(() =&gt; idToken != null || !FirebaseAuthManager.IsAuthenticated());&#10;&#10;        if (string.IsNullOrEmpty(idToken))&#10;        {&#10;            Debug.LogError(&quot;Nie udało się pobrać ID Token z FirebaseAuthManager.&quot;);&#10;            yield break;&#10;        }&#10;&#10;        // 2. Wysyłka danych do funkcji Firebase&#10;        PlayerEmailData data = level switch&#10;        {&#10;            1 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score1 = score },&#10;            2 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score2 = score },&#10;            3 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score3 = score },&#10;            4 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score4 = score },&#10;            5 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score5 = score },&#10;            6 =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName, score6 = PlayerPrefs.GetInt(&quot;LevelsCompleted&quot;, 0) &gt;= 5 ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0) : 0 },&#10;            _ =&gt; new PlayerEmailData { playerID = playerEmail, email = playerEmail, name = playerName }&#10;        };&#10;&#10;        string json = JsonUtility.ToJson(data);&#10;        byte[] bodyRaw = Encoding.UTF8.GetBytes(json);&#10;&#10;        using (UnityWebRequest www = new UnityWebRequest(FIREBASE_FUNCTION_URL, &quot;POST&quot;))&#10;        {&#10;            www.uploadHandler = new UploadHandlerRaw(bodyRaw);&#10;            www.downloadHandler = new DownloadHandlerBuffer();&#10;            www.SetRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);&#10;            www.SetRequestHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + idToken);&#10;            www.timeout = 10; // Dodaj timeout&#10;&#10;            yield return www.SendWebRequest();&#10;&#10;            if (www.result != UnityWebRequest.Result.Success)&#10;            {&#10;                Debug.LogError(&quot;Błąd wysyłki: &quot; + www.error + &quot; / &quot; + www.downloadHandler.text);&#10;            }&#10;            else&#10;            {&#10;                // po udanej wysyłce oblicz percentyl&#10;                StartCoroutine(RefreshScoresAfterSubmit(level));&#10;            }&#10;        }&#10;    }&#10;    &#10;    // ===== Percentyl =====&#10;    [Serializable]&#10;    private class ScoreListDto { public List&lt;float&gt; scores; }&#10;&#10;   private IEnumerator PreloadScores(int level)&#10;    {&#10;        _scoresReady = false;&#10;        _cachedLevel = level;&#10;        string url = $&quot;https://scores-zblptdvtpq-lm.a.run.app?level={level}&quot;;&#10;        using (UnityWebRequest www = UnityWebRequest.Get(url))&#10;        {&#10;            yield return www.SendWebRequest();&#10;            if (www.result == UnityWebRequest.Result.Success)&#10;            {&#10;                try&#10;                {&#10;                    var dto = JsonUtility.FromJson&lt;ScoreListDto&gt;(www.downloadHandler.text);&#10;                    _cachedScores = dto?.scores ?? new List&lt;float&gt;();&#10;                    _scoresReady = _cachedScores.Count &gt; 0;&#10;                }&#10;                catch&#10;                {&#10;                    _cachedScores = new List&lt;float&gt;();&#10;                    _scoresReady = false;&#10;                }&#10;            }&#10;            else&#10;            {&#10;                _cachedScores = new List&lt;float&gt;();&#10;                _scoresReady = false;&#10;            }&#10;        }&#10;    }&#10;   &#10;    private void ComputeAndShowPercentileFromCache(int level, float scoreToCompare)&#10;    {&#10;        if (!percentileText) return;&#10;&#10;        if (!_scoresReady || _cachedLevel != level || _cachedScores == null || _cachedScores.Count == 0)&#10;        {&#10;            percentileText.text = &quot;brak danych&quot;;&#10;            return;&#10;        }&#10;&#10;        bool lowerIsBetter = !infiniteGeneration;&#10;        float percentile = CalculatePercentile(_cachedScores, scoreToCompare, lowerIsBetter);&#10;        &#10;        if (percentile == -1f)&#10;        {&#10;            percentileText.text = &quot;Jesteś jedynym graczem na tym poziomie!&quot;;&#10;        }&#10;        else&#10;        {&#10;            percentileText.text = $&quot;Twój najlepszy wynik jest lepszy od {percentile:F1}% graczy&quot;;&#10;        }&#10;    }&#10;    &#10;    private IEnumerator RefreshScoresAfterSubmit(int level)&#10;    {&#10;        yield return new WaitForSecondsRealtime(1.0f); // czas na propagację&#10;        yield return StartCoroutine(PreloadScores(level));&#10;&#10;        float scoreForComparison = infiniteGeneration&#10;            ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0)&#10;            : PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;&#10;        ComputeAndShowPercentileFromCache(level, scoreForComparison);&#10;    }&#10;&#10;    private float CalculatePercentile(List&lt;float&gt; allScores, float playerScore, bool lowerIsBetter)&#10;    {&#10;        if (allScores == null || allScores.Count == 0) return 0f;&#10;        &#10;        // Jeśli gracz jest jedyny w rankingu&#10;        if (allScores.Count == 1)&#10;        {&#10;            return -1f; // Specjalna wartość oznaczająca, że gracz jest jedyny&#10;        }&#10;        &#10;        int worse = lowerIsBetter ? allScores.Count(s =&gt; s &gt; playerScore) : allScores.Count(s =&gt; s &lt; playerScore);&#10;        return (float)worse / allScores.Count * 100f;&#10;    }&#10;    // ===== Koniec percentyla =====&#10;    &#10;    #endregion&#10;    &#10;    #region Score Management&#10;&#10;    public void AddScore(float points)&#10;    {&#10;        if(!CharacterMovement.levelEnded &amp;&amp; CharacterMovement.startCounting)&#10;        {&#10;            _currentScore += points;&#10;            UpdateScoreDisplay();&#10;        }&#10;    }&#10;    &#10;    private void UpdateScoreDisplay()&#10;    {&#10;        if (scoreText)&#10;        {&#10;            if (infiniteGeneration)&#10;            {&#10;                scoreText.text = $&quot;Wynik: {_currentScore:F0}&quot;;&#10;            }&#10;            else&#10;            {&#10;                int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;            &#10;                scoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}&quot;;&#10;            }&#10;        }&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region UI Interaction&#10;&#10;    private void ShowPanel(GameState gameState, bool show = true)&#10;    {&#10;        switch (gameState)&#10;        {&#10;            case GameState.Playing:&#10;                ShowGameUI(show);&#10;                break;&#10;            case GameState.GameOver:&#10;                ShowGameOverPanel(show);&#10;                break;&#10;            default:&#10;                Debug.LogWarning(&quot;Nieznany stan gry!&quot;);&#10;                break;&#10;        }&#10;    }&#10;&#10;    public void ShowPauseMenu(bool show)&#10;    {&#10;        Time.timeScale = show ? 0f : 1f;&#10;        CharacterMovement.CanMove = !show;&#10;        if (pauseMenu) pauseMenu.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    private void ShowGameUI(bool show)&#10;    {&#10;        //Debug.Log(&quot;4. Wyświetlanie panelu gry.&quot;);&#10;        CharacterMovement.CanMove = true;&#10;        Time.timeScale = 1f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(!show);&#10;        if (gameUI) gameUI.SetActive(show);&#10;    }&#10;    &#10;    public void ShowGameOverPanel(bool show)&#10;    {&#10;        //Debug.Log(&quot;5. Wyświetlanie panelu końca gry.&quot;);&#10;        CharacterMovement.CanMove = false;&#10;        Time.timeScale = 0f;&#10;        if (gameOverPanel) gameOverPanel.SetActive(show);&#10;        if (gameUI) gameUI.SetActive(!show);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    #region Game Over Management&#10;    &#10;    public void GameOver(bool fallen)&#10;    {&#10;        // Zatrzymaj dodawanie punktów&#10;        CharacterMovement.CanMove = false;&#10;&#10;        if (fallen) { _soundPlayer.PlayRandom(&quot;Fall&quot;); }&#10;        &#10;        // Pokaż panel końca gry&#10;        ShowPanel(GameState.GameOver);&#10;&#10;        if (SceneManager.GetActiveScene().buildIndex == 6)&#10;        {&#10;            // save aracde level highest score&#10;            int bestScore = PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0);&#10;&#10;            if (_currentScore &gt; bestScore)&#10;            {&#10;                PlayerPrefs.SetInt(&quot;ArcadeScore&quot;, (int)_currentScore);&#10;                PlayerPrefs.Save();&#10;            }&#10;        }&#10;        else {&#10;            // save other level highest score&#10;            float bestScore = PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;            if (_currentScore &lt; bestScore)&#10;            {&#10;                PlayerPrefs.SetFloat($&quot;{lvlIndex}_HighestScore&quot;, _currentScore);&#10;                PlayerPrefs.Save();&#10;            }&#10;        }&#10;        &#10;        // Zaktualizuj wyświetlany wynik końcowy&#10;        if (gameOverScoreText)&#10;        {&#10;            if(infiniteGeneration)&#10;            {&#10;                if(PlayerPrefs.HasKey(&quot;ArcadeScore&quot;))&#10;                {&#10;                    var bestArcadeScore = PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0);&#10;                    gameOverScoreText.text = $&quot;Twój wynik: {_currentScore:F0}\nNajlepszy wynik: {bestArcadeScore}&quot;;&#10;                }&#10;                else&#10;                {&#10;                    gameOverScoreText.text = $&quot;Twój wynik: {_currentScore:F0}&quot;;&#10;                }&#10;            }&#10;            else&#10;            {&#10;&#10;                if (PlayerPrefs.HasKey($&quot;{lvlIndex}_HighestScore&quot;))&#10;                {&#10;                    float bestScore = PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;                    int bestMinutes = Mathf.FloorToInt(bestScore / 60f);&#10;                    int bestSeconds = Mathf.FloorToInt(bestScore % 60f);&#10;                    int bestMiliseconds = Mathf.FloorToInt(bestScore * 1000f % 1000f);&#10;                    &#10;                    int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                    int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                    int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;                    &#10;                    gameOverScoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}\nNajlepszy czas: {bestMinutes:D2}:{bestSeconds:D2}:{bestMiliseconds:D3}&quot;;&#10;                }&#10;                else {&#10;                    int minutes = Mathf.FloorToInt(_currentScore / 60f);&#10;                    int seconds = Mathf.FloorToInt(_currentScore % 60f);&#10;                    int miliseconds = Mathf.FloorToInt(_currentScore * 1000f % 1000f);&#10;                    gameOverScoreText.text = $&quot;Czas: {minutes:D2}:{seconds:D2}:{miliseconds:D3}&quot;;&#10;                }&#10;            }&#10;        }&#10;&#10;        if (percentileText) percentileText.text = &quot;Sprawdzanie wyników...&quot;;&#10;        float scoreForComparison = infiniteGeneration&#10;            ? PlayerPrefs.GetInt(&quot;ArcadeScore&quot;, 0)&#10;            : PlayerPrefs.GetFloat($&quot;{lvlIndex}_HighestScore&quot;, Mathf.Infinity);&#10;        ComputeAndShowPercentileFromCache(lvlIndex, scoreForComparison);&#10;        &#10;        NewLeaderboardEntry(loginManager.currentPlayerEmail, loginManager.currentPlayerName, _currentScore, lvlIndex);&#10;    }&#10;    &#10;    public void ReturnToMainMenu()&#10;    {&#10;        Time.timeScale = 1f;&#10;        SceneManager.LoadScene(0);&#10;    }&#10;&#10;    public void RestartGame()&#10;    {&#10;        _currentScore = 0f;&#10;        SceneManager.LoadScene(lvlIndex);&#10;    }&#10;    &#10;    #endregion&#10;    &#10;    &#10;    public void DeletePlayerDataAndRestart()&#10;    {&#10;        loginManager.DeletePlayerPrefs();&#10;        SceneManager.LoadScene(0);&#10;    }&#10;&#10;    /*private string GetOrCreatePlayerId()&#10;    {&#10;        string player = PlayerPrefs.GetString(&quot;PlayerId&quot;, &quot;&quot;);&#10;&#10;        if (string.IsNullOrEmpty(player))&#10;        {&#10;            // Generuj nowe ID używając System.Guid&#10;            player = Guid.NewGuid().ToString();&#10;            PlayerPrefs.SetString(&quot;PlayerId&quot;, player);&#10;            PlayerPrefs.Save();&#10;        }&#10;&#10;        return player;&#10;    }*/&#10;&#10;    #region Input Actions&#10;&#10;    private void OnEscape(InputAction.CallbackContext context)&#10;    {&#10;        //ShowPanel(gameOverPanel.activeInHierarchy ? GameState.Playing : GameState.GameOver);&#10;        bool isActive = pauseMenu.activeInHierarchy;&#10;&#10;        ShowPauseMenu(!isActive);&#10;    }&#10;    &#10;    #endregion&#10;&#10;}&#10;&#10;public enum GameState&#10;{&#10;    Playing,&#10;    GameOver&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>